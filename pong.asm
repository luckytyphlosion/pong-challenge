INCLUDE "constants.asm"
SECTION "rst00", ROM0 [$00]
; NOT ACTUAL RST VECTOR!!!
InvertYCoord:
	ld a,[$ff00+c]
	cpl
	ld [$ff00+c],a

InvertXCoord:
	ld a,[$ff00+c]
	xor %1111
	ld [$ff00+c],a
	ret

SECTION "vblank", ROM0 [$40]
	jp VBlank

SECTION "Entry", ROM0 [$100]
	jp Start0150
	
SECTION "Header", ROM0 [$104]

	; The header is generated by rgbfix.
	; The space here is allocated to prevent code from being overwritten.

	ds $150 - $104
	
Start0150:
	di
	
	; palettes
	xor a
	ld [rBGP], a
	ld [rSCX], a
    ld [rSCY], a
    ld [$ff80], a ; ball direction
    dec a
    ld [rOBP0], a
	
	ld hl,rLCDC
	ld [hl],%11000011
	
    ld a,$20
	ld [rJOYP],a
	
.lcdEnabled
	xor a
	ld [rIE],a
    ld a,[rLY]
	cp 145
	jr nz,.lcdEnabled
	res 7,[hl]
RestartGame:
	ld hl,$8000
	ld bc,$2000
.loop
	xor a
	ld [hli],a
	dec bc
	ld a,c
	or b
	jr nz,.loop ; clear memory and write to vram as well
;	dec a
;	ld b,$10
;.loop2
;	ld [hld],a ; create black tile
;	dec b
;	jr nz,.loop2
	ld de,$fe00 ; start of oam
	ld c,$9f
.loop2andAhalf
	ld [de],a
	inc e
	dec c
	jr nz,.loop2andAhalf
	ld e,a
	ld hl,OAMTable
	ld c,$5
.loop3
	ld a,[hli]
	ld [de],a
	inc e
	ld a,[hli]
	ld [de],a
	inc e
	xor a
	ld [de],a
	inc e
	ld [de],a
	inc e
	dec c
	jr nz,.loop3
	ld hl,rLCDC
	set 7,[hl]
	ld [rIF],a
	inc a
	ld [rIE],a
	ei
.haltLoop
	halt ; all operations are now done in vblank
	jr .haltLoop
	
OAMTable:
	db $98,$48
	db $98,$50
	db $98,$58
	db $98,$60
	db $90,$54
	
VBlank:
	ld a,[rJOYP]
	ld a,[rJOYP]
	ld a,[rJOYP]
	;ld a,[rJOYP]
	;ld a,[rJOYP]
	;ld a,[rJOYP]
	;ld a,[rJOYP]
	ld bc,$4
	bit D_RIGHT,a ; 0
	ld hl,$fe01
	push hl
	jr nz,.doNotMoveRight
	ld a,[hl]
	cp $a0 - 8 * 3
	jr z,.moveBall
	ld e,$2
	jr .updatePaddle
.doNotMoveRight
	bit D_LEFT,a
	jr nz,.moveBall
	ld a,[hl]
	cp $8
	jr z,.moveBall
	ld e,$fe
.updatePaddle
	;ld hl,$fe01
	ld d,c
.addLoop
	ld a,e
	add [hl]
	ld [hl],a
	add hl,bc
	dec d
	jr nz,.addLoop
.moveBall
; ball direction notes
; if $ff80 low nybble is non-zero, inc x pos
; else, dec x pod
; if high nybble is non-zero, inc y pos
; else, dec y pos
	pop hl
	ld c,$80
	ld a,[$fe00 + $4 * $4] ; ball y-coord
	ld d,a
	cp $10
	call z,InvertYCoord
	ld a,$90
	cp d
	ld a,[$fe01 + $4 * $4] ; x-coord of ball
	ld b,a
	jr nc,.ballNotNearPaddle
	; debug function
	;call InvertYCoord
	;ld a,b
	;jr .ballNotNearPaddle
	ld a,[hl] ; x coord of paddle
	sub $8
	cp b ; check if ball is past left edge of paddle
	push af
	call z,InvertXCoord
	pop af
	inc a
	cp b
	jp nc,.ballMissedPaddle
	add 39
	cp b ; check if ball is past right edge of paddle
	push af
	call z,InvertXCoord
	pop af
	dec a
	cp b
	jp c,.ballMissedPaddle
	call nz,InvertYCoord
	ld a,b
.ballNotNearPaddle
	cp $8
	call z,InvertXCoord
	ld a,b
.ballDidNotHitLeftWall
	cp $98
	call z,InvertXCoord
.redrawBall
	ld a,[$ff00+c]
	and %10000001
	ld c,a
	ld a,d
	add $4
	ld d,a
	ld a,c
	rla
	ld c,a
	jr c,.up
	ld a,d
	sub $8
	ld d,a
.up
	ld a,b
	add $4
	ld b,a
	ld a,c
	and a
	jr nz,.right
	ld a,b
	sub $8
	ld b,a
.right
	ld a,d
	ld [$fe00 + $4 * $4],a
	ld a,b
	ld [$fe01 + $4 * $4],a
	reti
	
.ballMissedPaddle
	ld a,$30
	ld [rJOYP],a
	ld a,$a0
	cp d
	jr nz,.redrawBall
	ld b,15
	xor a
	ld c,a
	ld [$ff80],a ; reset directions
.lostGame
	ld a,[rLY]
	cp b
	jr nz,.lostGame
	dec b
	jr nz,.lostGame
	pop af ; get rid of return pointer
	ld a,$20
	ld [$ff00+c],a
.disableLCD
	ld a,[rLY]
	cp 145
	jr nz,.disableLCD
	ld a,%01000011
	ld [rLCDC],a
	jp RestartGame
	
; 316 bytes